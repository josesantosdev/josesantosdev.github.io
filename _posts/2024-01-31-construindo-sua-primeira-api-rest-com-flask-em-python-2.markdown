---
layout: post
title: "Construindo sua Primeira API REST com Flask em Python PART 2"
date: 2024-01-31
categories: Tutorial
author: Jos√© Santos
---

Construindo sua Primeira API REST com Flask em Python - Parte 2

Ol√°, pessoal! Se voc√™ chegou at√© aqui, parab√©ns por completar a primeira etapa do nosso tutorial para construir sua primeira API REST com Flask em Python. Agora, vamos dar continuidade e avan√ßar para a segunda parte, onde vamos integrar nossa aplica√ß√£o com um banco de dados, armazenando informa√ß√µes importantes sobre nossos livros.

### Integrando com o Banco de Dados

Na segunda parte deste tutorial, vamos abordar a integra√ß√£o da nossa aplica√ß√£o com um banco de dados. Utilizaremos o SQLAlchemy para facilitar a intera√ß√£o com o banco, e o Marshmallow-SQLAlchemy para a serializa√ß√£o dos dados.

#### Configurando o Banco de Dados

Antes de come√ßarmos, vamos configurar nosso banco de dados. Dentro da pasta `instance`, voc√™ encontrar√° o arquivo `config.py`. Abra esse arquivo e insira as configura√ß√µes do seu banco de dados, como o URI. Certifique-se de ajustar as configura√ß√µes de acordo com o seu ambiente.

```python
# instance/config.py

SQLALCHEMY_DATABASE_URI = 'sua_URI_do_banco_de_dados_aqui'
SQLALCHEMY_TRACK_MODIFICATIONS = False
```

#### Criando o Modelo do Banco de Dados

Dentro da pasta `app/models`, vamos criar o modelo do nosso banco de dados. No arquivo `book_model.py`, defina a estrutura da entidade Livro e suas colunas.

```python
# app/models/book_model.py

from app import db

class Book(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    autor = db.Column(db.String(100), nullable=False)
    title = db.Column(db.String(100), nullable=False)
    prateleira = db.Column(db.String(1), nullable=False)
```

#### Atualizando o __init__.py

Certifique-se de atualizar o arquivo `__init__.py` dentro da pasta `app` para importar e inicializar o SQLAlchemy.

```python
# app/__init__.py

from flask import Flask
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

def create_app():
    app = Flask(__name__)
    app.config.from_pyfile('instance/config.py')

    db.init_app(app)

    # Restante do c√≥digo...
```

#### Migrando o Banco de Dados

Com as configura√ß√µes do banco de dados e o modelo definido, vamos realizar a migra√ß√£o. No terminal, execute os seguintes comandos:

```bash
flask db init
flask db migrate
flask db upgrade
```

Esses comandos criar√£o as tabelas no seu banco de dados com base no modelo que definimos.

### Implementando Opera√ß√µes CRUD

Agora que nosso banco de dados est√° configurado, vamos implementar as opera√ß√µes CRUD (Create, Read, Update, Delete) para a entidade Livro.

#### Controller - book_controller.py

Dentro da pasta `app/controllers`, crie o arquivo `book_controller.py`. Neste arquivo, implementaremos as fun√ß√µes para lidar com as requisi√ß√µes relacionadas aos livros.

```python
# app/controllers/book_controller.py

from flask import request, jsonify
from app.models.book_model import Book
from app import db

def create_book():
    data = request.get_json()

    new_book = Book(autor=data['autor'], title=data['title'], prateleira=data['prateleira'])

    db.session.add(new_book)
    db.session.commit()

    return jsonify({'message': 'Livro criado com sucesso!'}), 201

# Implemente as demais opera√ß√µes CRUD...
```

#### Atualizando o __init__.py

N√£o se esque√ßa de importar e registrar o `book_controller.py` no `__init__.py` da pasta `controllers`.

```python
# app/controllers/__init__.py

from .book_controller import create_book

# Adicione outras importa√ß√µes conforme necess√°rio...
```

#### Roteamento - __init__.py

Vamos atualizar o `__init__.py` na pasta `app` para incluir os roteamentos necess√°rios para as opera√ß√µes CRUD.

```python
# app/__init__.py

from flask import Flask
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

def create_app():
    app = Flask(__name__)
    app.config.from_pyfile('instance/config.py')

    db.init_app(app)

    # Roteamento para opera√ß√µes CRUD
    from app.controllers import create_book
    app.route('/books', methods=['POST'])(create_book)

    # Adicione outros roteamentos conforme necess√°rio...

    return app
```

### Testando as Novas Funcionalidades

Agora que implementamos a integra√ß√£o com o banco de dados e as opera√ß√µes CRUD, √© hora de testar nossa aplica√ß√£o. Certifique-se de que o ambiente virtual do Pipenv esteja ativo (`pipenv shell`) e execute os testes com o Pytest.

```bash
pytest
```

### Conclus√£o

Se voc√™ seguiu todos os passos corretamente, sua aplica√ß√£o Flask agora est√° integrada a um banco de dados e √© capaz de realizar opera√ß√µes CRUD. Parab√©ns por chegar at√© aqui!

Continue acompanhando a pr√≥xima parte do tutorial, onde abordaremos t√≥picos avan√ßados, como autentica√ß√£o de usu√°rios e aprimoramento da API. Se tiver d√∫vidas ou problemas, n√£o hesite em consultar as refer√™ncias fornecidas.

Nos vemos na pr√≥xima etapa do tutorial! üöÄ